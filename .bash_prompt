# Display git branch if in a git repo (along with the state of the branch)
prompt_git() {
	local s=""
	local branchName=""

	# check if the current directory is in a git repository
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

			# ensure index is up to date
			git update-index --really-refresh  -q &>/dev/null

			# check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s="$s+";
			fi

			# check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s="$s!";
			fi

			# check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s="$s?";
			fi

			# check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s="$s$";
			fi

		fi

		# get the short symbolic ref
		# if HEAD isn't a symbolic ref, get the short SHA
		# otherwise, just give up
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		              git rev-parse --short HEAD 2> /dev/null || \
		              printf "(unknown)")"

		[ -n "$s" ] && s="[$s]"

		printf "%s" "$1$branchName$s"
	else
		return
	fi
}

# Colors are hard...
PS1="\[\033[36m\]\u\[\033[m\]@"
PS1+="\[\033[32m\]\h: "
PS1+="\[\033[33;1m\]\w\[\033[m\]"
PS1+="\$(prompt_git \" on \[\033[1;35m\]\")"
PS1+="\[\033[m\]\n\$ "

export PS1
