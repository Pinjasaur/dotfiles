#!/usr/bin/env bash
#
# qq - get _quick_ questions answered via LLMs (Kagi's FastGPT)

# Strict settings
set -o errexit
set -o pipefail
set -o nounset

# On-the-fly debugging
[[ -n "${DEBUG:-}" ]] && set -x

# "Magic" variables
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "${__file}" .sh)"

if ! command -v jq >/dev/null 2>&1; then
  echo "jq is not installed"
  exit 1
fi

if [[ -z "${KAGI_TOKEN:-}" ]]; then
  echo "Token required. Visit https://kagi.com/settings?p=api"
  exit 1
fi

# Read stdin if it's there
[[ -p /dev/stdin ]] && stdin=$(cat -)

# Be more verbose (really just include references)
verbose=false
if [[ "${1:-}" =~ -v|--verbose ]]; then
  verbose=true
  shift
fi

# Construct the query, using jq as necessary to safely escape
query="Answer in as few words as possible. Use a brief style with short replies. Respond in plain-text, no formatting."
[[ -n "${stdin:-}" ]] && query+=" Input: $(echo -n "${stdin:-}" | jq -Rsar .)"
query+=" Question: $(echo -n "${*:-}" | jq -Rsar .)"

if ! response=$(curl -s --fail-with-body \
  -H "Authorization: Bot $KAGI_TOKEN" \
  -H "Content-Type: application/json" \
  --data "{\"query\": $(echo -n "$query" | jq -Rsar .)}" \
  https://kagi.com/api/v0/fastgpt); then
  echo "No dice."
  echo "$response" | jq -r '.error[] | .msg'
  exit 1
fi

if ! $verbose; then
  # Remove the unicode-y brackets
  echo "$response" | jq -r '.data.output' | sed -E 's/【[0-9]*】//g'
  exit
fi

# Swap out unicode-y brackets for ASCII brackets
echo "$response" | jq -r '.data.output' | sed -e 's/【/[/g' -e 's/】/]/g'
echo "$response" | jq -r '.data.references | to_entries[] | "[\(.key+1)]: \(.value.url)"'
